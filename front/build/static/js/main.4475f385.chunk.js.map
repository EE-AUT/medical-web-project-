{"version":3,"sources":["pages/signUpForm.js","pages/signInForm.js","pages/homeForm.js","App.js","serviceWorker.js","index.js"],"names":["signUpForm","props","state","fullName","email","password","rePassword","isDocter","handleChange","bind","handleSubmit","e","preventDefault","console","log","this","target","value","type","checked","name","setState","className","to","activeClassName","exact","onSubmit","htmlFor","id","placeholder","onChange","hidden","Component","signInForm","homeForm","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kUA2IeA,E,kDAnIX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,SAAS,KACTC,MAAO,KACPC,SAAU,KACVC,WAAY,KACZC,UAAU,GAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAZL,E,yDAeNE,GACTA,EAAEC,iBACFC,QAAQC,IAAIC,KAAKb,S,mCAIRS,GACTA,EAAEC,iBACF,IAAII,EAASL,EAAEK,OACXC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DG,EAAOJ,EAAOI,KAElBL,KAAKM,SAAL,eAESD,EAAOH,M,+BAKhB,OAEI,yBAAKK,UAAU,cACX,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAgB,6BAA6BF,UAAU,uBAA9E,WACA,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAgB,6BAA6BF,UAAU,uBAA9E,YAEJ,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAgB,0BACnCF,UAAU,mBADd,WADJ,OAEyD,kBAAC,IAAD,CAASG,OAAK,EAACF,GAAG,WAC/DC,gBAAgB,0BAA0BF,UAAU,mBADP,YAGzD,0BAAMA,UAAU,aACZI,SAAUX,KAAKL,cAEf,yBAAKY,UAAU,cACX,2BAAOA,UAAU,mBACbK,QAAQ,YADZ,eAEA,2BAAOT,KAAK,OACRU,GAAG,WACHN,UAAU,mBACVO,YAAY,uBACZT,KAAK,WACLU,SAAUf,KAAKP,aACfS,MAAOF,KAAKb,MAAMC,YAG1B,yBAAKmB,UAAU,cAEX,2BAAOA,UAAU,mBACbK,QAAQ,SADZ,WAEA,2BAAOT,KAAK,OACRU,GAAG,QACHN,UAAU,mBACVO,YAAY,2BACZT,KAAK,QACLU,SAAUf,KAAKP,aACfS,MAAOF,KAAKb,MAAME,SAG1B,yBAAKkB,UAAU,cAEX,2BAAOA,UAAU,mBACbK,QAAQ,YADZ,cAEA,2BAAOT,KAAK,WACRU,GAAG,WACHN,UAAU,mBACVO,YAAY,sBACZT,KAAK,WACLU,SAAUf,KAAKP,aACfS,MAAOF,KAAKb,MAAMG,YAG1B,yBAAKiB,UAAU,cAEX,2BAAOA,UAAU,mBACbK,QAAQ,mBADZ,qBAEA,2BAAOT,KAAK,WACRU,GAAG,iBACHN,UAAU,mBACVO,YAAY,uBACZT,KAAK,iBACLU,SAAUf,KAAKP,aACfS,MAAOF,KAAKb,MAAMI,cAK1B,2BAAOgB,UAAU,4BAEb,2BAAOA,UAAU,sBACbJ,KAAK,WACLE,KAAK,WAJb,uBAKA,yBAAKE,UAAU,cAEX,2BAAOJ,KAAK,OACRU,GAAG,WACHN,UAAU,mBACVO,YAAY,sBACZT,KAAK,WACLW,QAAQ,EACRD,SAAUf,KAAKP,aACfS,MAAOF,KAAKb,MAAMK,YAI1B,yBAAKe,UAAU,cAEX,4BAAQA,UAAU,2BAAlB,oB,GA3HCU,aC8DVC,E,kDAhEb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAM,CACTE,MAAM,KACNC,SAAS,MAGX,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,yDAYNE,GACXA,EAAEC,iBACFC,QAAQC,IAAIC,KAAKb,S,mCAINS,GACXA,EAAEC,iBACF,IAAII,EAAQL,EAAEK,OACVC,EAAuB,aAAfD,EAAOE,KAAqBF,EAAOG,QAAUH,EAAOC,MAC5DG,EAAMJ,EAAOI,KAEjBL,KAAKM,SAAL,eAEKD,EAAMH,M,+BAKX,OAEE,yBAAKK,UAAU,cACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAgB,6BAA6BF,UAAU,uBAA9E,WACA,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAgB,6BAA6BF,UAAU,uBAA9E,YAEF,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAgB,0BACrCF,UAAU,mBADZ,WADF,OAEqD,kBAAC,IAAD,CAASG,OAAK,EAACF,GAAG,WACjEC,gBAAgB,0BAA0BF,UAAU,mBADL,YAGrD,0BAAMA,UAAU,aAAaI,SAAUX,KAAKL,cAE1C,yBAAKY,UAAU,cACb,2BAAOA,UAAU,mBAAmBK,QAAQ,SAA5C,SACA,2BAAOT,KAAK,OAAOU,GAAG,QAAQN,UAAU,mBAAmBO,YAAY,2BAA2BT,KAAK,QAAQH,MAAOF,KAAKX,MAAO0B,SAAUf,KAAKP,gBAEnJ,yBAAKc,UAAU,cACb,2BAAOA,UAAU,mBAAmBK,QAAQ,YAA5C,YACA,2BAAOT,KAAK,WAAWU,GAAG,WAAWN,UAAU,mBAAmBO,YAAY,sBAAsBT,KAAK,WAAWH,MAAOF,KAAKV,SAAWyB,SAAUf,KAAKP,gBAG5J,yBAAKc,UAAU,cACb,4BAAQA,UAAU,2BAAlB,mB,GAxDaU,aCQVE,E,uKAPP,OACI,yC,GAHWF,aCuBRG,G,6KAjBX,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,MACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAOG,OAAK,EAACW,KAAO,IAAIC,UAAWH,IACnC,kBAAC,IAAD,CAAQE,KAAK,WAAWC,UAAWrC,IACnC,kBAAC,IAAD,CAAOoC,KAAK,WAAWC,UAAWJ,W,GAT5BD,cCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.4475f385.chunk.js","sourcesContent":["// const { Component } = require(\"react\")\n\nimport React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\n\n\nclass signUpForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fullName:null,\n            email: null,\n            password: null,\n            rePassword: null,\n            isDocter: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(this.state)\n\n    }\n\n    handleChange(e) {\n        e.preventDefault()\n        let target = e.target;\n        let value = target.type === \"checkbox\" ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState(\n            {\n                [name]: value\n            }\n        );\n    }\n    render() {\n        return (\n\n            <div className=\"FormCenter\" >\n                <div className=\"PageSwitcher\">\n                    <NavLink to=\"/sign-in\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item \">Sign In</NavLink>\n                    <NavLink to=\"/sign-up\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item \">Sign Up</NavLink>\n                </div>\n                <div className=\"FormTitle\">\n                    <NavLink to=\"/sign-in\" activeClassName=\"FormTitle__Link--Active\"\n                        className=\"FormTitle__Link\">Sign In</NavLink> or <NavLink exact to=\"/sign-up\"\n                            activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign Up</NavLink>\n                </div>\n                <form className=\"FormFields\"\n                    onSubmit={this.handleSubmit} >\n\n                    <div className=\"FormFields\" >\n                        <label className=\"FormField__Label\"\n                            htmlFor=\"fullName\" > full Name </label>\n                        <input type=\"text\"\n                            id=\"fullName\"\n                            className=\"FormField__Input\"\n                            placeholder=\"Enter your full name\"\n                            name=\"fullName\"\n                            onChange={this.handleChange}\n                            value={this.state.fullName} />\n\n                    </div>\n                    <div className=\"FormFields\" >\n\n                        <label className=\"FormField__Label\"\n                            htmlFor=\"email\" > Email </label>\n                        <input type=\"text\"\n                            id=\"email\"\n                            className=\"FormField__Input\"\n                            placeholder=\"Enter your Email address\"\n                            name=\"email\" \n                            onChange={this.handleChange}\n                            value={this.state.email} />                            \n\n                    </div>\n                    <div className=\"FormFields\" >\n\n                        <label className=\"FormField__Label\"\n                            htmlFor=\"password\" > Password </label>\n                        <input type=\"password\"\n                            id=\"password\"\n                            className=\"FormField__Input\"\n                            placeholder=\"Enter your password\"\n                            name=\"password\" \n                            onChange={this.handleChange}\n                            value={this.state.password} />                            \n\n                    </div>\n                    <div className=\"FormFields\" >\n\n                        <label className=\"FormField__Label\"\n                            htmlFor=\"repeat password\" > Repeat Password </label>\n                        <input type=\"password\"\n                            id=\"repeatPassword\"\n                            className=\"FormField__Input\"\n                            placeholder=\"Repeat your password\"\n                            name=\"repeatPassword\" \n                            onChange={this.handleChange}\n                            value={this.state.rePassword} />                            \n\n                    </div>\n\n\n                    <label className=\"FormField__CheckboxLabel\" >\n\n                        <input className=\"FormField__Checkbox\"\n                            type=\"checkbox\"\n                            name=\"doctor\" /> Are you a doctor ?</label>\n                    <div className=\"FormFields\" >\n\n                        <input type=\"text\"\n                            id=\"doctorID\"\n                            className=\"FormField__Input\"\n                            placeholder=\"Enter your doctorID\"\n                            name=\"doctorID\"\n                            hidden={true} \n                            onChange={this.handleChange}\n                            value={this.state.isDocter} />\n                    </div >\n\n\n                    <div className=\"FromFields\" >\n\n                        <button className=\"FormField__Button mr-20\" > Sign Up </button>\n                    </div >\n                </form>\n            </div >\n        );\n\n    }\n}\n\nexport default signUpForm;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\n\n\nclass signInForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      email:null,\n      password:null\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    console.log(this.state)\n\n  }\n\n  handleChange(e){\n    e.preventDefault()\n    let target =e.target;\n    let value = target.type ===\"checkbox\" ? target.checked : target.value;\n    let name =target.name;\n\n    this.setState(\n      {\n        [name]:value\n      }\n    );\n  }\n  render() {\n    return (\n\n      <div className=\"FormCenter\">\n        <div className=\"PageSwitcher\">\n          <NavLink to=\"/sign-in\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item \">Sign In</NavLink>\n          <NavLink to=\"/sign-up\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item \">Sign Up</NavLink>\n        </div>\n        <div className=\"FormTitle\">\n          <NavLink to=\"/sign-in\" activeClassName=\"FormTitle__Link--Active\"\n            className=\"FormTitle__Link\">Sign In</NavLink> or <NavLink exact to=\"/sign-up\"\n              activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign Up</NavLink>\n        </div>\n        <form className=\"FormFields\" onSubmit={this.handleSubmit}>\n\n          <div className=\"FormFields\">\n            <label className=\"FormField__Label\" htmlFor=\"email\">Email</label>\n            <input type=\"text\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your Email address\" name=\"email\" value={this.email} onChange={this.handleChange} />\n          </div>\n          <div className=\"FormFields\">\n            <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.password}  onChange={this.handleChange}/>\n          </div>\n\n          <div className=\"FromFields\">\n            <button className=\"FormField__Button mr-20\">Sign In </button>\n          </div>\n        </form>\n      </div>\n    );\n\n  }\n}\n\nexport default signInForm;","import React, { Component } from 'react';\n\n\nclass homeForm extends Component{\n    render(){\n        return(\n            <h1>hello</h1>\n\n        );\n    }\n}\n\nexport default homeForm;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport signUpForm from \"./pages/signUpForm\";\nimport signInForm from \"./pages/signInForm\";\nimport homeForm from './pages/homeForm'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <Route></Route>\n        <div className=\"App\">\n          <div className=\"App__Form\">\n            <Route exact path = \"/\" component={homeForm}></Route>\n            <Route  path=\"/sign-up\" component={signUpForm}></Route>\n            <Route path=\"/sign-in\" component={signInForm}></Route>\n          </div>\n\n        </div>\n      </BrowserRouter>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}