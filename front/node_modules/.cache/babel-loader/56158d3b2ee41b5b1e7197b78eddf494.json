{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispath => {\n    setTimeout(() => {\n      dispath(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispath => {\n    dispath(authStart);\n    axios.post('http://localhost:8000/rest-auth/login/', {\n      username: username,\n      password: password,\n      email: username\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispath(authSuccess(token));\n      dispath(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispath(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispath => {\n    dispath(authStart);\n    axios.post('http://localhost:8000/api-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispath(authSuccess(token));\n      dispath(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispath(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/mehdi/Desktop/medical_web/front/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispath","setTimeout","authLogin","username","password","post","email","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authSignup","password1","password2","authCheckState","dispatch","getItem","undefined"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\"\nimport axios from 'axios'\n\nexport const authStart = () => {\n    return{\n        type: actionTypes.AUTH_START\n    }\n}\n\n\nexport const authSuccess = token => {\n    return{\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    }\n}\n\n\nexport const authFail = error => {\n    return{\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\n\nexport const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('expirationDate');\n    return{\n        type: actionTypes.AUTH_LOGOUT\n    }\n\n}\n\n\n\nexport const checkAuthTimeout = expirationTime => {\n    return dispath => {\n        setTimeout(() => {\n            dispath(logout())\n        }, expirationTime * 1000)\n    }\n}\n\n\nexport const authLogin = (username, password) => {\n    return dispath => {\n        dispath(authStart);\n        axios.post('http://localhost:8000/rest-auth/login/', {\n            username: username,\n            password: password, \n            email: username\n        })\n        .then(res => {\n            const token = res.data.key;\n            const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispath(authSuccess(token));\n            dispath(checkAuthTimeout(3600))\n        })\n        .catch(err=> {\n            dispath(authFail(err))\n        })\n\n    }\n}\n\n\nexport const authSignup = (username, email, password1, password2) => {\n    return dispath => {\n        dispath(authStart);\n        axios.post('http://localhost:8000/api-auth/registration/', {\n            username: username,\n            email: email,\n            password1: password1,\n            password2: password2\n        })\n        .then(res => {\n            const token = res.data.key;\n            const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispath(authSuccess(token));\n            dispath(checkAuthTimeout(3600))\n        })\n        .catch(err=> {\n            dispath(authFail(err))\n        })\n\n    }\n}\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (token === undefined) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if ( expirationDate <= new Date() ) {\n                dispatch(logout());\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout( (expirationDate.getTime() - new Date().getTime()) / 1000) );\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}